/**
 * ProactiveInsightsController.js
 * 
 * Controller for managing proactive insights generated by the AirportAI agent.
 * 
 * Part of AirportAI Agent Phase 3 implementation.
 */

const logger = require('../utils/logger');
const { ProactiveAnalysisService } = require('../services/agent');
const { standCapacityService } = require('../services/standCapacity/StandCapacityToolService');
const { maintenanceService } = require('../services/maintenance/MaintenanceRequestService');

/**
 * Controller for managing proactive insights
 */
class ProactiveInsightsController {
  constructor() {
    // Initialize services
    this.proactiveAnalysisService = new ProactiveAnalysisService({
      standCapacityService,
      maintenanceService
    });
    
    logger.info('ProactiveInsightsController initialized');
  }
  
  /**
   * Get current proactive insights
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async getInsights(req, res) {
    try {
      logger.debug('Getting proactive insights');
      
      const options = {
        airportCode: req.query.airportCode,
        startDate: req.query.startDate,
        endDate: req.query.endDate,
        categories: req.query.category ? [req.query.category] : undefined,
        priority: req.query.priority,
        status: req.query.status,
        limit: req.query.limit ? parseInt(req.query.limit, 10) : 10
      };
      
      // Generate insights
      const insights = await this.proactiveAnalysisService.generateInsights(options);
      
      // Filter by status if specified
      let filteredInsights = insights;
      if (options.status) {
        filteredInsights = insights.filter(insight => insight.status === options.status);
      }
      
      // Filter by priority if specified
      if (options.priority) {
        filteredInsights = filteredInsights.filter(insight => insight.priority === options.priority);
      }
      
      // Prepare response
      const response = {
        insights: filteredInsights,
        total: insights.length,
        unacknowledged: insights.filter(insight => insight.status === 'new').length
      };
      
      return res.json(response);
    } catch (error) {
      logger.error(`Error getting insights: ${error.message}`);
      return res.status(500).json({ error: 'Failed to retrieve insights' });
    }
  }
  
  /**
   * Get a specific insight by ID
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async getInsightById(req, res) {
    try {
      const insightId = req.params.insightId;
      
      logger.debug(`Getting insight ${insightId}`);
      
      // Get insight
      const insight = this.proactiveAnalysisService.getInsightById(insightId);
      
      if (!insight) {
        return res.status(404).json({ error: 'Insight not found' });
      }
      
      return res.json(insight);
    } catch (error) {
      logger.error(`Error getting insight: ${error.message}`);
      return res.status(500).json({ error: 'Failed to retrieve insight' });
    }
  }
  
  /**
   * Update the status of an insight
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async updateInsightStatus(req, res) {
    try {
      const insightId = req.params.insightId;
      const update = req.body;
      
      logger.debug(`Updating status of insight ${insightId} to ${update.status}`);
      
      // Validate status
      const validStatuses = ['new', 'acknowledged', 'in_progress', 'completed', 'dismissed'];
      if (!validStatuses.includes(update.status)) {
        return res.status(400).json({ error: 'Invalid status' });
      }
      
      // Update insight
      const updatedInsight = this.proactiveAnalysisService.updateInsightStatus(insightId, {
        status: update.status,
        comment: update.comment,
        assignedTo: update.assignedTo,
        updatedBy: req.user.id
      });
      
      if (!updatedInsight) {
        return res.status(404).json({ error: 'Insight not found' });
      }
      
      return res.json({
        insightId,
        status: updatedInsight.status,
        updatedAt: updatedInsight.updatedAt,
        updatedBy: updatedInsight.updatedBy
      });
    } catch (error) {
      logger.error(`Error updating insight status: ${error.message}`);
      return res.status(500).json({ error: 'Failed to update insight status' });
    }
  }
  
  /**
   * Execute a recommended action for an insight
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   */
  async executeRecommendedAction(req, res) {
    try {
      const insightId = req.params.insightId;
      const actionId = req.params.actionId;
      const parameters = req.body.parameters || {};
      const notes = req.body.notes;
      
      logger.debug(`Executing action ${actionId} for insight ${insightId}`);
      
      // Execute action
      const result = await this.proactiveAnalysisService.executeRecommendedAction(
        insightId,
        actionId,
        {
          ...parameters,
          notes,
          executedBy: req.user.id
        }
      );
      
      return res.json(result);
    } catch (error) {
      logger.error(`Error executing recommended action: ${error.message}`);
      return res.status(500).json({ error: 'Failed to execute recommended action' });
    }
  }
}

module.exports = new ProactiveInsightsController();