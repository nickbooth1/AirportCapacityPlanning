import React, { useState, useEffect } from 'react';
import { Card, List, Tag, Button, Dropdown, Menu, Typography, Space, Modal, Tabs, Empty, Alert, Spin, Badge } from 'antd';
import { 
  BulbOutlined, 
  CheckCircleOutlined, 
  WarningOutlined, 
  InfoCircleOutlined, 
  ArrowUpOutlined, 
  MoreOutlined,
  UserOutlined,
  ClockCircleOutlined,
  TagOutlined,
  AreaChartOutlined,
  BuildOutlined
} from '@ant-design/icons';
import axios from 'axios';

const { Title, Text, Paragraph } = Typography;
const { TabPane } = Tabs;

/**
 * Component for displaying proactive insights generated by the AI agent
 */
const ProactiveInsights = ({ airportId, limit = 5 }) => {
  const [insights, setInsights] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeInsight, setActiveInsight] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [filter, setFilter] = useState('all');
  const [actionLoading, setActionLoading] = useState(false);

  // Fetch insights on component mount
  useEffect(() => {
    fetchInsights();
  }, [airportId, filter]);

  // Fetch insights from API
  const fetchInsights = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Build query parameters
      let params = { limit };
      if (filter !== 'all') {
        params.status = filter;
      }
      
      // Make API request
      const response = await axios.get(`/api/insights`, { params });
      
      if (response.data && response.data.insights) {
        setInsights(response.data.insights);
      } else {
        setInsights([]);
      }
    } catch (err) {
      console.error('Error fetching insights:', err);
      setError('Failed to load insights. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  // Handle insight status update
  const updateInsightStatus = async (insightId, newStatus, comment = '') => {
    try {
      setActionLoading(true);
      
      await axios.put(`/api/insights/${insightId}`, {
        status: newStatus,
        comment
      });
      
      // Update local state
      setInsights(prevInsights => 
        prevInsights.map(insight => 
          insight.insightId === insightId 
            ? { ...insight, status: newStatus }
            : insight
        )
      );
      
      if (activeInsight && activeInsight.insightId === insightId) {
        setActiveInsight({ ...activeInsight, status: newStatus });
      }
      
      // Close modal if open
      if (modalVisible) {
        setModalVisible(false);
      }
    } catch (err) {
      console.error('Error updating insight status:', err);
      setError('Failed to update insight. Please try again.');
    } finally {
      setActionLoading(false);
    }
  };

  // Execute a recommended action
  const executeAction = async (insightId, actionId, parameters = {}) => {
    try {
      setActionLoading(true);
      
      const response = await axios.post(
        `/api/insights/${insightId}/actions/${actionId}/execute`, 
        { parameters }
      );
      
      // Show success and refresh insights
      fetchInsights();
      
      return response.data;
    } catch (err) {
      console.error('Error executing action:', err);
      setError('Failed to execute recommended action. Please try again.');
      return null;
    } finally {
      setActionLoading(false);
    }
  };

  // Get priority tag color
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'red';
      case 'medium': return 'orange';
      case 'low': return 'blue';
      default: return 'default';
    }
  };

  // Get category icon
  const getCategoryIcon = (category) => {
    switch (category) {
      case 'capacity_constraint': return <WarningOutlined />;
      case 'optimization_opportunity': return <BulbOutlined />;
      case 'maintenance_impact': return <BuildOutlined />;
      case 'unusual_pattern': return <AreaChartOutlined />;
      default: return <InfoCircleOutlined />;
    }
  };

  // Format category for display
  const formatCategory = (category) => {
    return category
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  // Handle opening insight detail modal
  const openInsightDetail = (insight) => {
    setActiveInsight(insight);
    setModalVisible(true);
  };

  // Render insight actions menu
  const renderActionMenu = (insight) => {
    return (
      <Menu>
        {insight.status === 'new' && (
          <Menu.Item 
            key="acknowledge" 
            onClick={() => updateInsightStatus(insight.insightId, 'acknowledged')}
          >
            Acknowledge
          </Menu.Item>
        )}
        
        {(insight.status === 'new' || insight.status === 'acknowledged') && (
          <Menu.Item 
            key="inprogress" 
            onClick={() => updateInsightStatus(insight.insightId, 'in_progress')}
          >
            Mark In Progress
          </Menu.Item>
        )}
        
        {insight.status === 'in_progress' && (
          <Menu.Item 
            key="complete" 
            onClick={() => updateInsightStatus(insight.insightId, 'completed')}
          >
            Mark Completed
          </Menu.Item>
        )}
        
        <Menu.Item 
          key="dismiss" 
          onClick={() => updateInsightStatus(insight.insightId, 'dismissed')}
        >
          Dismiss
        </Menu.Item>
        
        <Menu.Item key="details" onClick={() => openInsightDetail(insight)}>
          View Details
        </Menu.Item>
      </Menu>
    );
  };

  // Render each insight card
  const renderInsightItem = (insight) => {
    const statusColor = {
      new: 'blue',
      acknowledged: 'purple',
      in_progress: 'orange',
      completed: 'green',
      dismissed: 'default'
    };
    
    return (
      <List.Item key={insight.insightId}>
        <Card 
          className="insight-card"
          title={
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Space>
                {getCategoryIcon(insight.category)}
                <span>{insight.title}</span>
              </Space>
              <Dropdown overlay={renderActionMenu(insight)} trigger={['click']}>
                <Button type="text" icon={<MoreOutlined />} />
              </Dropdown>
            </div>
          }
          extra={
            <Space>
              <Tag color={getPriorityColor(insight.priority)}>
                {insight.priority.toUpperCase()}
              </Tag>
              <Tag color={statusColor[insight.status]}>
                {insight.status.replace('_', ' ').toUpperCase()}
              </Tag>
            </Space>
          }
        >
          <Paragraph ellipsis={{ rows: 2 }}>{insight.description}</Paragraph>
          
          <div style={{ marginTop: 8 }}>
            <Space wrap>
              <Tag icon={<TagOutlined />}>{formatCategory(insight.category)}</Tag>
              {insight.affectedAssets && insight.affectedAssets.length > 0 && (
                <Tag>{insight.affectedAssets[0]}</Tag>
              )}
              {insight.timeRange && (
                <Tag icon={<ClockCircleOutlined />}>
                  {new Date(insight.timeRange.start).toLocaleDateString()} to {new Date(insight.timeRange.end).toLocaleDateString()}
                </Tag>
              )}
            </Space>
          </div>
          
          <div style={{ marginTop: 12, display: 'flex', justifyContent: 'space-between' }}>
            <Button 
              type="primary" 
              size="small" 
              onClick={() => openInsightDetail(insight)}
            >
              View Details
            </Button>
            
            {insight.status === 'new' && (
              <Button 
                size="small" 
                onClick={() => updateInsightStatus(insight.insightId, 'acknowledged')}
              >
                Acknowledge
              </Button>
            )}
          </div>
        </Card>
      </List.Item>
    );
  };

  // Render recommended actions
  const renderRecommendedActions = (actions) => {
    if (!actions || actions.length === 0) {
      return <Empty description="No recommended actions" />;
    }
    
    return (
      <List
        itemLayout="horizontal"
        dataSource={actions}
        renderItem={action => (
          <List.Item
            actions={[
              <Button 
                size="small" 
                type="primary"
                loading={actionLoading}
                onClick={() => executeAction(activeInsight.insightId, action.actionId)}
              >
                Execute
              </Button>
            ]}
          >
            <List.Item.Meta
              title={action.description}
              description={
                <Space direction="vertical">
                  <Text type="secondary">Impact: {action.estimatedImpact}</Text>
                  <Text type="secondary">Difficulty: {action.difficulty}</Text>
                  {action.implementationTimeEstimate && (
                    <Text type="secondary">Est. time: {action.implementationTimeEstimate}</Text>
                  )}
                </Space>
              }
            />
          </List.Item>
        )}
      />
    );
  };

  // Render metrics display
  const renderMetrics = (metrics) => {
    if (!metrics || Object.keys(metrics).length === 0) {
      return <Empty description="No metrics available" />;
    }
    
    return (
      <List
        itemLayout="horizontal"
        dataSource={Object.entries(metrics)}
        renderItem={([key, value]) => (
          <List.Item>
            <List.Item.Meta
              title={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
              description={
                typeof value === 'number' && value <= 1 && value >= 0
                  ? `${(value * 100).toFixed(1)}%`
                  : value.toString()
              }
            />
          </List.Item>
        )}
      />
    );
  };

  // Render detail modal
  const renderDetailModal = () => {
    if (!activeInsight) return null;
    
    return (
      <Modal
        title={
          <Space>
            {getCategoryIcon(activeInsight.category)}
            <span>{activeInsight.title}</span>
          </Space>
        }
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setModalVisible(false)}>
            Close
          </Button>,
          activeInsight.status === 'new' && (
            <Button 
              key="acknowledge" 
              type="primary"
              loading={actionLoading}
              onClick={() => updateInsightStatus(activeInsight.insightId, 'acknowledged')}
            >
              Acknowledge
            </Button>
          ),
          activeInsight.status === 'acknowledged' && (
            <Button 
              key="inprogress" 
              type="primary"
              loading={actionLoading}
              onClick={() => updateInsightStatus(activeInsight.insightId, 'in_progress')}
            >
              Start Working
            </Button>
          ),
          activeInsight.status === 'in_progress' && (
            <Button 
              key="complete" 
              type="primary"
              loading={actionLoading}
              onClick={() => updateInsightStatus(activeInsight.insightId, 'completed')}
            >
              Mark Completed
            </Button>
          )
        ].filter(Boolean)}
        width={700}
      >
        <div style={{ marginBottom: 16 }}>
          <Space wrap>
            <Tag color={getPriorityColor(activeInsight.priority)}>
              Priority: {activeInsight.priority.toUpperCase()}
            </Tag>
            <Tag color="blue">
              Confidence: {activeInsight.confidence ? `${(activeInsight.confidence * 100).toFixed(0)}%` : 'N/A'}
            </Tag>
            <Tag icon={<TagOutlined />}>
              {formatCategory(activeInsight.category)}
            </Tag>
            <Tag color={
              activeInsight.status === 'new' ? 'blue' :
              activeInsight.status === 'acknowledged' ? 'purple' :
              activeInsight.status === 'in_progress' ? 'orange' :
              activeInsight.status === 'completed' ? 'green' : 'default'
            }>
              {activeInsight.status.replace('_', ' ').toUpperCase()}
            </Tag>
          </Space>
        </div>
        
        <Paragraph>{activeInsight.description}</Paragraph>
        
        <Tabs defaultActiveKey="actions">
          <TabPane tab="Recommended Actions" key="actions">
            {renderRecommendedActions(activeInsight.recommendedActions)}
          </TabPane>
          
          <TabPane tab="Metrics" key="metrics">
            {renderMetrics(activeInsight.metrics)}
          </TabPane>
          
          <TabPane tab="Details" key="details">
            <List>
              {activeInsight.affectedAssets && (
                <List.Item>
                  <List.Item.Meta
                    title="Affected Assets"
                    description={activeInsight.affectedAssets.join(', ')}
                  />
                </List.Item>
              )}
              
              {activeInsight.timeRange && (
                <List.Item>
                  <List.Item.Meta
                    title="Time Range"
                    description={`${new Date(activeInsight.timeRange.start).toLocaleDateString()} to ${new Date(activeInsight.timeRange.end).toLocaleDateString()}`}
                  />
                </List.Item>
              )}
              
              <List.Item>
                <List.Item.Meta
                  title="Created"
                  description={new Date(activeInsight.createdAt).toLocaleString()}
                />
              </List.Item>
              
              {activeInsight.updatedAt && (
                <List.Item>
                  <List.Item.Meta
                    title="Last Updated"
                    description={new Date(activeInsight.updatedAt).toLocaleString()}
                  />
                </List.Item>
              )}
              
              {activeInsight.assignedTo && (
                <List.Item>
                  <List.Item.Meta
                    title="Assigned To"
                    description={activeInsight.assignedTo}
                  />
                </List.Item>
              )}
            </List>
          </TabPane>
        </Tabs>
      </Modal>
    );
  };

  // Count insights by status
  const insightCounts = insights.reduce((acc, insight) => {
    acc[insight.status] = (acc[insight.status] || 0) + 1;
    return acc;
  }, {});

  return (
    <div className="proactive-insights-container">
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
        <Title level={4}>
          <Space>
            <BulbOutlined />
            Proactive Insights
          </Space>
        </Title>
        
        <Space>
          <Tabs 
            activeKey={filter} 
            onChange={setFilter}
            size="small"
            style={{ marginBottom: 0 }}
          >
            <TabPane 
              tab={<Badge count={insights.length} size="small">All</Badge>} 
              key="all" 
            />
            <TabPane 
              tab={<Badge count={insightCounts.new || 0} size="small">New</Badge>} 
              key="new" 
            />
            <TabPane 
              tab={<Badge count={insightCounts.acknowledged || 0} size="small">Acknowledged</Badge>} 
              key="acknowledged" 
            />
            <TabPane 
              tab={<Badge count={insightCounts.in_progress || 0} size="small">In Progress</Badge>} 
              key="in_progress" 
            />
          </Tabs>
          
          <Button onClick={fetchInsights}>Refresh</Button>
        </Space>
      </div>
      
      {error && (
        <Alert 
          message="Error" 
          description={error} 
          type="error" 
          showIcon 
          style={{ marginBottom: 16 }} 
        />
      )}
      
      {loading ? (
        <div style={{ textAlign: 'center', padding: 20 }}>
          <Spin size="large" />
        </div>
      ) : insights.length === 0 ? (
        <Empty description="No insights available" />
      ) : (
        <List
          grid={{ 
            gutter: 16,
            xs: 1,
            sm: 1, 
            md: 2,
            lg: 2,
            xl: 3,
            xxl: 3
          }}
          dataSource={insights}
          renderItem={renderInsightItem}
        />
      )}
      
      {renderDetailModal()}
    </div>
  );
};

export default ProactiveInsights;