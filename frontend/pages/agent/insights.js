import React, { useState, useEffect } from 'react';
import { Card, Typography, Spin, Alert, Select, Button, Space, Divider, Tabs } from 'antd';
import { BulbOutlined, ReloadOutlined, FilterOutlined } from '@ant-design/icons';
import ProactiveInsights from '../../components/agent/ProactiveInsights';
import Layout from '../../components/Layout';
import proactiveInsightsApi from '../../src/api/proactiveInsightsApi';

const { Title, Paragraph, Text } = Typography;
const { Option } = Select;
const { TabPane } = Tabs;

/**
 * Page for displaying and managing proactive insights
 */
const InsightsPage = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [airportId, setAirportId] = useState(null);
  const [airports, setAirports] = useState([]);
  const [activeTab, setActiveTab] = useState('insights');
  const [refreshKey, setRefreshKey] = useState(0);
  const [generatingInsights, setGeneratingInsights] = useState(false);

  // Load airports on component mount
  useEffect(() => {
    fetchAirports();
  }, []);

  // Fetch available airports
  const fetchAirports = async () => {
    try {
      // In a real implementation, this would fetch from the API
      // For now, we're using dummy data
      setAirports([
        { id: 'ARN', name: 'Stockholm Arlanda' },
        { id: 'CPH', name: 'Copenhagen Airport' },
        { id: 'OSL', name: 'Oslo Airport' },
        { id: 'HEL', name: 'Helsinki Airport' }
      ]);
      
      // Set default airport
      setAirportId('ARN');
      setLoading(false);
    } catch (err) {
      console.error('Error fetching airports:', err);
      setError('Failed to load airports. Please try again.');
      setLoading(false);
    }
  };

  // Generate new insights
  const handleGenerateInsights = async (type = null) => {
    if (!airportId) return;
    
    try {
      setGeneratingInsights(true);
      await proactiveInsightsApi.generateInsights(airportId, type);
      // Refresh insights by updating the key
      setRefreshKey(prev => prev + 1);
    } catch (err) {
      console.error('Error generating insights:', err);
      setError('Failed to generate insights. Please try again.');
    } finally {
      setGeneratingInsights(false);
    }
  };

  // Handle airport change
  const handleAirportChange = (newAirportId) => {
    setAirportId(newAirportId);
    // Refresh insights by updating the key
    setRefreshKey(prev => prev + 1);
  };

  if (loading) {
    return (
      <Layout>
        <div style={{ padding: '20px', textAlign: 'center' }}>
          <Spin size="large" tip="Loading airports..." />
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div style={{ padding: '20px' }}>
        <Card>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 24 }}>
            <Title level={2}>
              <Space>
                <BulbOutlined />
                Proactive Insights
              </Space>
            </Title>
            
            <Space>
              <Text>Airport:</Text>
              <Select 
                value={airportId} 
                onChange={handleAirportChange}
                style={{ width: 200 }}
                disabled={generatingInsights}
              >
                {airports.map(airport => (
                  <Option key={airport.id} value={airport.id}>
                    {airport.name}
                  </Option>
                ))}
              </Select>
              
              <Button 
                type="primary" 
                onClick={() => handleGenerateInsights()}
                loading={generatingInsights}
                icon={<ReloadOutlined />}
              >
                Generate New Insights
              </Button>
            </Space>
          </div>
          
          {error && (
            <Alert 
              message="Error" 
              description={error} 
              type="error" 
              showIcon 
              style={{ marginBottom: 16 }} 
              closable
              onClose={() => setError(null)}
            />
          )}
          
          <Paragraph>
            Proactive insights are automatically generated by analyzing capacity data, flight patterns, and
            maintenance schedules to identify opportunities, constraints, and unusual patterns that might
            require attention.
          </Paragraph>
          
          <Tabs activeKey={activeTab} onChange={setActiveTab}>
            <TabPane tab="All Insights" key="insights">
              <ProactiveInsights 
                key={refreshKey}
                airportId={airportId} 
                limit={12}
              />
            </TabPane>
            
            <TabPane tab="Capacity Insights" key="capacity">
              <Space style={{ marginBottom: 16 }}>
                <Button 
                  onClick={() => handleGenerateInsights('capacity')}
                  loading={generatingInsights && activeTab === 'capacity'}
                  icon={<ReloadOutlined />}
                >
                  Generate Capacity Insights
                </Button>
              </Space>
              
              <ProactiveInsights 
                key={`${refreshKey}-capacity`}
                airportId={airportId} 
                limit={12}
                filter={{ category: 'capacity_constraint' }}
              />
            </TabPane>
            
            <TabPane tab="Maintenance Insights" key="maintenance">
              <Space style={{ marginBottom: 16 }}>
                <Button 
                  onClick={() => handleGenerateInsights('maintenance')}
                  loading={generatingInsights && activeTab === 'maintenance'}
                  icon={<ReloadOutlined />}
                >
                  Generate Maintenance Insights
                </Button>
              </Space>
              
              <ProactiveInsights 
                key={`${refreshKey}-maintenance`}
                airportId={airportId} 
                limit={12}
                filter={{ category: 'maintenance_impact' }}
              />
            </TabPane>
            
            <TabPane tab="Flight Pattern Insights" key="flight_pattern">
              <Space style={{ marginBottom: 16 }}>
                <Button 
                  onClick={() => handleGenerateInsights('flight_pattern')}
                  loading={generatingInsights && activeTab === 'flight_pattern'}
                  icon={<ReloadOutlined />}
                >
                  Generate Flight Pattern Insights
                </Button>
              </Space>
              
              <ProactiveInsights 
                key={`${refreshKey}-flight_pattern`}
                airportId={airportId} 
                limit={12}
                filter={{ category: 'unusual_pattern' }}
              />
            </TabPane>
          </Tabs>
        </Card>
      </div>
    </Layout>
  );
};

export default InsightsPage;